Function New-VSSExchRestore{
    <#
    .SYNOPSIS
    Restore a VSS Snapshot of an Exchange Database on Pure Flash Array to the original location using VSS.
    
    .DESCRIPTION
    The New-ExchRestore function is only supported on Physical Exchange Servers or VMs which directly connect to the Pure Flash Array with
    the Microsoft iSCSI initiator in the VM. The function is passed the Exchange database name and a $true or $false value for $DBOnly. 
    A window opens in the metadata folder for the database, and a backup cab is selected.
    If DBOnly = $true and if the database and transaction logs are on different Pure volumes, only the database volume will be restored.
    If DBOnly = $false, both are restored which causes loss of data, past the point in time of the backup. 
    
    Two Alternatives to data loss exist:
    1) Do not restore. Instead expose the snapshot to an alternate location, and through Pure's ODX integration, quickly copy the database from the backup LUN to the production location.
    2) Accidentally restore with DBOnly = $false and lose data. Recover and Mount the deleted live file system that has yet to be eradicated, and recover transaction logs newer than the backup that was restored.
    
    This function will fail on a VM unless the Pure Volume is mounted through the in-guest Microsoft iSCSI initiator.

    .EXAMPLE
    Load the Script then run the New-ExchRestore function:
    . ./PureExchangeWrapper.psm1
    
    Restore Database DB1 & Transaction Logs
    New-VSSExchRestore -DBName DB1
    
    Restore Database Volume with EDB, but do not Restore Volume with Transaction logs:
    New-VSSExchRestore -DBName DB1 -DBOnly $true
    #>
    Param(
        [Parameter(ParameterSetName="restore", Mandatory=$true)]
        [parameter(Position=0)]
        [string]$DBName,
        [Parameter(ParameterSetName="restore", Mandatory=$false)]
        [parameter(Position=1)]
        [bool]$DBOnly = $false,
        [Parameter(ParameterSetName="restore", Mandatory=$false)]
        [bool]$Force = $false
    )
    if ( ($VMorNot -eq $false)  -or (($VMorNot -eq $true) -and ($Force -eq $true)) ) {
        Write-Host -ForeGroundColor white "Restoring a Snapshot to the original location will cause data loss."
        Write-Host -ForeGroundColor white "Everything past the point of the backup will be lost."
        Write-Host -ForeGroundColor white "When a snapshot is restored in a Pure Storage Flash Array, the live filesystem will be deleted."
        Write-Host -ForeGroundColor white "It will show up as a deleted snapshot for the volume and can be mounted, and log files recovered."
            
        $CabFile = @(Get-ChildItem "c:\program files\pure storage\vss\exchange\$DBName" | Out-GridView -title 'Choose a CAB file' -passthru)
        $CabName = $CabFile.FullName #full path and file Name
    
    #   Get the database log and edb file path
        $LogPath = Get-MailboxDatabase -id $DBName | Select-Object logfolderpath
        $DBPath = Get-MailboxDatabase -id $DBName | Select-Object edbfilepath
    
    #   Grab disk path to pass to diskshadow
        $Disk1 = Get-Volume -filepath $DBPath.edbfilepath | Select-Object -expandproperty path
        $Disk2 = Get-Volume -filepath $LogPath.logfolderpath | Select-Object -expandproperty path
        
        Write-Host -ForeGroundColor white "Database will be set to '-allowfilerestore'"
        Write-Host -ForeGroundColor white "Database must be dismounted before it can be restored. "
        Write-Host -ForeGroundColor white "Dismount Now?"
        Set-MailboxDatabase $DBName -allowfilerestore $true
        Dismount-Database $DBName

        $CabExcludeSuffix = [io.path]::GetFileNameWithoutExtension($CabFile)
        $script = "./tmp.dsh"
        "Load metadata ""$CabName""" | Add-Content $script
        "IMPORT" | Add-Content $script
        "Add shadow %"+$CabExcludeSuffix+"_01%" | Add-Content $script
        if (($Disk1[0] -ne $Disk2[0]) -and ($DBOnly -eq $false)) {"Add shadow %"+$CabExcludeSuffix+"_02%" | Add-Content $script }
        "Begin restore" | Add-Content $script
        "resync" | Add-Content $script
        "end restore" | Add-Content $script
        "exit" | Add-Content $script
    
        diskshadow /s $script
        remove-item $script

        $BackupCompleteTime = Get-Date -uFormat "%m-%d-%Y--%H%M-%S"
        Write-Host ""
        Write-Host -ForeGroundColor white "Ending Restore of $DBName at $BackupCompleteTime"
        Write-Host -ForeGroundColor white "Compare this time within a few seconds with the successful restore Event below:"
        Write-Host ""
        $eventcheck = Get-EventLog -log Application -newest 10 -instanceid 1074008335 -Message "*$DBName*"
        $eventcheck[0] | Format-List
        Write-Host -ForeGroundColor white "Pure VSS Restore complete for $DBName at $BackupCompleteTime"
        Get-MailboxDatabaseCopyStatus -id $DBName
        Write-Host -ForeGroundColor white "Database is restored. If needed, perform transaction log file manipulation and then mount the database."
        Write-Host -ForeGroundColor white "For Example:  mount-database $DBName"

    } else { 
    Write-Host "VM detected. Restore will only work if the database is on an iSCSI Volume directly mapped through the guest initiator."
    Write-Host "If this is the case, use -Force `$true"
    Write-Host "Example: New-ExchRestore -DBName DB1 -Force `$true"
}
    #TODO:
    #mount and then copy missing logs
    #consider logging transaction in global restore log file
}#END New-VSSExchRestore{} 
